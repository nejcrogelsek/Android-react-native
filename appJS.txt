import React from 'react';
import { View, Text, Button, Image } from 'react-native';
import { createStackNavigator, createAppContainer, createBottomTabNavigator } from 'react-navigation';

import HomeScreenContent from './components/HomeScreenContent';

class LogoTitle extends React.Component {
    render() {
        return (
            <React.Fragment>
                <Image
                    source={require('./home.png')}
                    style={{ width: 30, height: 30, marginLeft: 10 }}
                />
                <Text style={{ fontWeight: "bold", marginLeft: 5 }} >HOME</Text>
            </React.Fragment>
        );
    }
}

class HomeScreen extends React.Component {

    static navigationOptions = {
        headerTitle: <LogoTitle />,
        headerRight: (
            <Button
                onPress={() => alert('This is a button!')}
                title="Info"
                color="#111"
            />
        ),
    };



    componentDidMount() {
        this.props.navigation.setParams({ increaseCount: this._increaseCount });
    }

    state = {
        count: 0,
    };

    _increaseCount = () => {
        this.setState({ count: this.state.count + 1 });
    };

    render() {
        return (
            <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
                <HomeScreenContent />
                <Button
                    title="Go to Details"
                    //onPress={() => this.props.navigation.navigate('Details')}
                    onPress={() => {
                        /* 1. Navigate to the Details route with params */
                        this.props.navigation.navigate('Details', {
                            itemId: 86,
                            otherParam: 'anything you want here',
                        });
                    }}
                />
            </View>
        );
    }
}

class DetailsScreen extends React.Component {

    static navigationOptions = ({ navigation, navigationOptions }) => {
        const { params } = navigation.state;

        return {
            title: params ? params.otherParam : 'A Nested Details Screen',
            /* These values are used instead of the shared configuration! */
            headerStyle: {
                backgroundColor: navigationOptions.headerTintColor,
            },
            headerTintColor: navigationOptions.headerStyle.backgroundColor,
        };
    };

    render() {

        /* 2. Get the param, provide a fallback value if not available */
        const { navigation } = this.props;
        const itemId = navigation.getParam('itemId', 'NO-ID');
        const otherParam = navigation.getParam('otherParam', 'some default value');

        return (
            <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
                <Text>Details Screen</Text>
                <Text>itemId: {JSON.stringify(itemId)}</Text>
                <Text>otherParam: {JSON.stringify(otherParam)}</Text>
                <Button
                    title="Go to Details... again"
                    onPress={() =>
                        this.props.navigation.push('Details', {
                            itemId: Math.floor(Math.random() * 100),
                        })}
                />
                <Button
                    title="Go to Home"
                    onPress={() => this.props.navigation.navigate('Home')}
                />
                <Button
                    title="Go back"
                    onPress={() => this.props.navigation.goBack()}
                />
                <Button
                    title="Update the title"
                    onPress={() => this.props.navigation.setParams({ otherParam: 'Updated!' })}
                />
            </View>
        );
    }
}

const RootStack = createStackNavigator(
    {
        Home: HomeScreen,
        Details: DetailsScreen,
    },
    {
        initialRouteName: 'Home',
        /* The header config from HomeScreen is now here */
        defaultNavigationOptions: {
            headerStyle: {
                backgroundColor: '#f4511e',
            },
            headerTintColor: '#fff',
            headerTitleStyle: {
                fontWeight: 'bold',
            },
        },
    }
);

const AppContainer = createAppContainer(RootStack);

const Home = createStackNavigator(
    {
        Home: HomeScreen,
        Details: DetailsScreen,
    }, {
        defaultNavigationOptions: {
            headerTintColor: '#fff',
            headerStyle: {
                backgroundColor: '#000',
            },
        },
        navigationOptions: {
            tabBarLabel: 'Home!',
        },
    }
);

const Tabs = createBottomTabNavigator({ Home });

/*xport default class App extends React.Component {
  render() {
    return <AppContainer />;
  }
}*/

export default class App extends React.Component {
    someEvent() {
        // call navigate for AppNavigator here:
        this.navigator &&
            this.navigator.dispatch(
                NavigationActions.navigate({ routeName: someRouteName })
            );
    }
    render() {
        return (
            <AppContainer
                ref={nav => {
                    this.navigator = nav;
                }}
            />
        );
    }
}
